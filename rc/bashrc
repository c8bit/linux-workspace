#!/bin/bash
#TODO: Figure out the proper hashbang to use.

#------------------------------------------------------------------------------
# ~/.bashrc
#------------------------------------------------------------------------------

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

readonly BASH_VERSION_NUMBER=$(sed -r 's/^([0-9]+\.[0-9]+\.[0-9]+).*$/\1/' <<< $BASH_VERSION)
readonly BASHRC_SCRIPTS_DIR=~/.bashrc-scripts

#Prompt Profiles
readonly PROMPT_DEFAULT='[\u@\h \W]{$?}\$ '
readonly PROMPT_CAUTION='caution->'
readonly PROMPT_PROD=''

#TODO: Confirm this works properly, remain consistent with standards (once I
#   decide what they are).
readonly POWERLINE_SCRIPT="~/.shell_prompt.sh"
if [[ -f $POWERLINE_SCRIPT ]]; then
    source ${POWERLINE_SCRIPT}
fi

PS1=${PROMPT_DEFAULT}

function sourceBashrcScripts {
    ## Sources all the startup scripts in the bashrc scripts directory.

    for file in ${BASHRC_SCRIPTS_DIR}/*; do
        source $file
    done
}

function checkPythonVenv {
    if [[ -z "$VIRTUAL_ENV" ]]; then
        echo "Virtual Environment not set."
    else
        basename ${VIRTUAL_ENV}
    fi
}

function sshProfileSwitch {
    ## Facilitates prompt profile switching on ssh to specific hosts.
    #
    #  \arg remoteHost: The user@host argument to ssh.

    local remoteHost=$1

    #FIXME: Not working yet... (T^T)
    #Set the profile here
    local oldProfile=${PS1}
    if [[ ${remoteHost} == *"sat"* ]]; then
        PS1=${PROMPT_CAUTION}
    elif [[ ${remoteHost} == *"prod"* ]]; then
        PS1=${PROMPT_PROD}
    fi

    ssh ${remoteHost}

    #Restore the old profile here
    PS1=${oldProfile}
}

function setAliases {
    alias ls='ls --color=auto'
    alias l='ls -lh'
    alias la='l -a'

    alias venv='checkPythonVenv'
    #alias ssh='sshProfileSwitch'
}

main() {
    setAliases
    sourceBashrcScripts

    #Show machine info
    screenfetch
}

main
